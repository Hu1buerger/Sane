Python Sane module
==================
The sane module is an Python interface to the SANE (Scanning is Now Easy)
library, which provides access to various raster scanning devices such as
flatbed scanners and digital cameras.  For more information about SANE, consult
the SANE Web site at http://www.sane-project.org.  Note that this documentation
doesn't duplicate all the information in the SANE documentation, which you must
also consult to get a complete understanding.

This module has been originally developed by A.M. Kuchling (amk1@erols.com),
it is currently maintained by Sandro Mani (manisandro@gmail.com).


The module exports two object types, a bunch of constants, and three
functions.

sane module methods
-------------------

init()
    Initialize sane. Returns a tuple (sane_ver, ver_maj, ver_min, ver_patch).

get_devices()
    Return a list of 4-tuples containing the available scanning devices.
    Each tuple is of the format (device_name, vendor, model, type).

    device_name -- the device name, suitable for passing to open()
    vendor -- the device vendor
    mode -- the device model vendor
    type -- the device type, such as 'virtual device' or 'video camera'

open(devicename)
    Open a device for scanning. Suitable values for devname are returned in the
    first item of the tuples returned by get_devices().
    Raises a _sane.error on error. Returns a SaneDev object on success.


SaneDev object
==============
Class representing a SANE device. Besides the functions documented below,
the class has some special attributes which can be read:

devname        -- the scanner device name (as passed to sane.open())
sane_signature -- the tuple (devname, brand, name, type)
scanner_model  -- the tuple (brand, name)
opt            -- dictionary of options
optlist        -- list of option names
area           -- scan area

Furthermore, the scanner options are also exposed as attributes, which can
be read or set by using the option name as attribute name, i.e.:

    print scanner.mode
    scanner.mode = 'Color'

An Option object for a scanner option can be retreived via __getitem__
lookup, i.e.:

        option = scanner['mode']

SaneDev class methods
---------------------

get_parameters()
    Return a 5-tuple holding all the current device settings:
    (format, last_frame, (pixels_per_line, lines), depth, bytes_per_line)

    format -- one of "grey", "color", "red", "green", "blue" or "unknown format".
    last_frame -- whether this is the last frame of a multi frame image
    pixels_per_line -- width of the scanned image
    lines -- height of the scanned image
    depth -- gives number of bits per sample
    bytes_per_line -- the number of bytes per line

get_options()
    Return a list of tuples describing all the available options.

start()
    Initiate a scanning operation. This can throw a _sane.error if an
    invalid value is set for an option.

cancel()
    Cancel an in-progress scanning operation.

snap()
    Read image data and return a PIL.Image object. An RGB image is returned
    for multi-band images, a L image for single-band images.

scan()
    Convenience method which calls start followed by snap.

arr_snap()
    Read image data and return a 2d numpy array. For single-band images,
    the array shape will be (width, heigth), for multi-band images, the
    array shape will be (nbands * width, height).

arr_scan()
    Convenience method which calls start followed by arr_snap.

multi_scan()
    Return a _SaneIterator for ADF scans.

fileno()
    Return the file descriptor for the scanning device.

def close()
    Close the scanning device.

Option object
=============
Class representing a SANE option. These are returned by a __getitem__
lookup of an option on the device, i.e.

    option = scanner["mode"]

The Option class has the following attributes:
index -- number from 0 to n, giving the option number
name -- a string uniquely identifying the option
title -- single-line string containing a title for the option
desc -- a long string describing the option, useful as a help message
type -- type of this option. Possible values: TYPE_BOOL, TYPE_INT,
        TYPE_STRING, etc.
unit -- units of this option. Possible values: UNIT_NONE, UNIT_PIXEL, etc.
size -- size of the value in bytes
cap -- capabilities available; CAP_EMULATED, CAP_SOFT_SELECT, etc.
constraint -- constraint on values. Possible values:
                None : No constraint
                (min,max,step) : Range
                list of integers or strings: listed of permitted values

Option class methods
--------------------
is_active()
    Return whether the option is active.

is_settable()
    Return whether the option is settable.

Example usage:
==============
See demo_pil.py and demo_numpy.py.
